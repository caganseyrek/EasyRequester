class e{static isDebugMode=!1;constructor(){}static setDebugMode(e){this.isDebugMode=e}static info(e,t){this.isDebugMode&&console.debug(`[EasyRequester_DEBUG] ${t} at ${e}`)}static error(e,t){throw this.isDebugMode&&console.debug(`[EasyRequester_ERROR] ${t} at ${e}`),new Error(`EasyRequesterError: ${t} at ${e}`)}}class t{requestQueue=[];isRequestInProgress=!1;constructor(){}async processQueue(){if(this.isRequestInProgress||0===this.requestQueue.length)return;const{requestFn:t,resolve:s,reject:r}=this.requestQueue.shift();this.isRequestInProgress=!0,e.info(t.name,"Processing request queue");try{s(await t())}catch(e){r(e)}finally{this.isRequestInProgress=!1,this.processQueue()}}enqueueRequest(e){return new Promise(((t,s)=>{this.requestQueue.push({requestFn:e,resolve:t,reject:s}),this.processQueue()}))}}class s{controllers;abortController;constructor(){this.controllers=new Map}getControllers(){return this.controllers}setupAbortController(t,s){if(this.abortController=new AbortController,s.signal=this.abortController.signal,this.controllers.has(t)){e.info(this.setupAbortController.name,"Aborted previous request due to being received a new request.");const s=this.controllers.get(t);s?.abort()}this.controllers.set(t,this.abortController)}handleAbortError(e){this.getControllers().delete(e)}}class r{constructor(){}static generateEndpoint(t){let s="";return"object"==typeof t.endpoint?(Object.entries(t.endpoint).forEach((([t,r])=>{"string"!=typeof r&&e.error(this.generateEndpoint.name,`Expected value for key "${t}" to be typeof 'string'.`);const n=r.replace(/^\/|\/$/g,"");s+=`/${n}`})),e.info(this.generateEndpoint.name,`Generating endpoint from object: ${JSON.stringify(s)}`),s):(s="/"+t.endpoint.replace(/^\/|\/$/g,""),e.info(this.generateEndpoint.name,`Generating endpoint from string: ${JSON.stringify(s)}`),s)}static generateURL(t){const s=`${`${t.protocol}://${t.baseURL}${t.port?`:${t.port}`:""}`}${this.generateEndpoint({endpoint:t.endpoint})}${t.query?`?${new URLSearchParams(t.query).toString()}`:""}`;return e.info(this.generateURL.name,`Generated request URL: ${s}`),s}static generateHeaders(t){const s={...t.customHeaders,"Content-Type":t.contentType??"application/json",...t.accessToken&&{Authorization:`Bearer ${t.accessToken}`},...t.responseLang&&{"Accept-Language":t.responseLang}};return e.info(this.generateHeaders.name,`Generated headers: ${JSON.stringify(s)}`),s}}class n{requestConfig;clientConfig;requestQueuer;requestAborter;constructor(t,s,r,n){this.requestConfig=t,this.clientConfig=s,this.requestQueuer=r,this.requestAborter=n,e.info("ConfiguredRequester Constuctor","ConfiguredRequester is initialized.")}async sendRequest(t){const s=r.generateURL(this.requestConfig.url),n=r.generateHeaders({contentType:this.requestConfig.header?.contentType,responseLang:this.requestConfig.header?.responseLang,customHeaders:this.requestConfig.header?.headers}),o=async()=>{try{const r={method:this.requestConfig.method,credentials:this.requestConfig.auth?.includeCookies?"include":"same-origin",headers:n};"abort-previous"===this.clientConfig.onNewRequest&&(e.info(o.name,"Controllers for request aborter is set up."),this.requestAborter.setupAbortController(s,r)),["GET","HEAD"].includes(this.requestConfig.method)||(e.info(o.name,"Added request body due to method NOT being 'GET' or 'HEAD'"),r.body=JSON.stringify(t)),e.info(o.name,"Sending request...");const i=await fetch(s,r);return this.clientConfig.acceptStatusCodes&&this.clientConfig.acceptStatusCodes.includes(i.status)?(e.info(o.name,"Successfully received a response with an expected status code"),i.headers.get("content-type")?.includes("application/json")?(e.info(o.name,"Resolved response message as JSON"),{isSuccess:!0,message:i.statusText,...await i.json()}):(e.info(o.name,"Resolved response message as text"),{isSuccess:!0,message:i.statusText,text:await i.text()})):(e.info(o.name,"Received a response with an unexpected status code"),"abort-previous"===this.clientConfig.onNewRequest&&(e.info(o.name,"Deleted request aborder controllers."),this.requestAborter.getControllers().delete(s)),{isSuccess:!1})}catch(t){return e.error(o.name,`An error ocurred during request ${t}`),"abort-previous"===this.clientConfig.onNewRequest&&(e.info(o.name,"Deleted request aborder controllers."),this.requestAborter.handleAbortError(s)),{isSuccess:!1,message:t}}};return"enqueue-new"===this.clientConfig.onNewRequest?(e.info(o.name,"Request enqueued"),this.requestQueuer.enqueueRequest(o)):o()}}class o{POSSIBLE_STATUS_CODES=[200,201,202,203,204,205,206];clientConfig;requestQueuer=new t;requestAborter=new s;constructor(t){this.clientConfig={onNewRequest:t.onNewRequest??"enqueue-new",acceptStatusCodes:Array.from(new Set([...this.POSSIBLE_STATUS_CODES,...t.acceptStatusCodes??[]])),isDebugMode:t.isDebugMode??!1},e.info("EasyRequestre Constructor","EasyRequester is initialized with client config.")}setRequestConfig(t){const s={url:{protocol:t.url.protocol??"http",baseURL:t.url.baseURL,port:t.url.port,endpoint:t.url.endpoint,query:t.url.query},method:t.method,...t.header&&{header:{contentType:t.header.contentType??"Content-Type: application/json",responseLang:t.header.responseLang,headers:t.header.headers??{}}},...t.auth&&{auth:{accessToken:t.auth.accessToken,includeCookies:t.auth.includeCookies??!1}}};return e.info(this.setRequestConfig.name,"Request config set up."),new n(s,this.clientConfig,this.requestQueuer,this.requestAborter)}}export{o as EasyRequester};
